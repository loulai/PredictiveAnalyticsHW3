import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;

import Jama.Matrix;

/**
 * The Dataset class is essentially a Matrix with special attributes tailored for this project.
 * It is used to represent the TFIDF dataset in a format that
 * is suitable to conduct SVD and compare results to JavaML.
 * @input vectors generated by CSVToVectors.java, which are 2D ArrayLists of Doubles
 * @see CSVToVectors.java
 */
public class Dataset {
	
	Matrix matrix; // A 2D array of doubles like this: double[][]
	double[][] arrays;
	int numRows;
	int numColumns;
	
	public static void main(String[] args) {
		File inputFile = new File("./tfidfMatrix.csv");
		CSVToVectors tfidfVectors = new CSVToVectors(inputFile);
		Dataset tfidfDataset = new Dataset(tfidfVectors);	
		
		// Testing subset function (used for SVD calculation)
		Dataset smallTfidfDataset = tfidfDataset.subset(4, 5);
		smallTfidfDataset.printMatrix();
		
		Dataset dataset2 = tfidfDataset.subset(14, 20);
		dataset2.printToCSV("smallTransposedTFIDF.csv");
		dataset2.printMatrix();
		
		// Run only if new TFIDF matrix created and want to generate transposed CSV file. Very quick.
		//tfidfDataset.printToCSV("transposedTFIDF.csv");
	}

	public Dataset(Matrix inputMatrix) {
		matrix = inputMatrix;
		arrays = inputMatrix.getArray();
		numRows = inputMatrix.getRowDimension();
		numColumns = inputMatrix.getColumnDimension();
	}
	
	public Dataset(CSVToVectors CSVToVecObject) {
		ArrayList<ArrayList<Double>> ArrayListVectors = CSVToVecObject.vectors;
		numRows = ArrayListVectors.size();      // rows = 14
		numColumns = CSVToVecObject.dimensions; // cols = 1499
		
		// Convert 2D ArrayList to 2D Array
		double[][] ArrayVectors = new double[numRows][numColumns];
		for(int i = 0; i < numRows; i++) {
			ArrayList<Double> oneRow = ArrayListVectors.get(i);
			for(int k = 0; k < numColumns; k++) {
				ArrayVectors[i][k] = oneRow.get(k);
			}
		}
		matrix = new Matrix(ArrayVectors);
		arrays = matrix.getArray();
	}
	
	public double[][] getArrays(){ // To implement: account for empty Matrix. But who would call this on empty Matrix?!
		return matrix.getArray();
	}
	
	/** Subset 1
	 *  Returns reduced Dataset, if Dataset is given
	 */
	public Dataset subset( int newRowSize, int newColumnSize) {
		
		// If user inputs a larger matrix than existing
		if(newRowSize > numRows || newColumnSize > numColumns) {
			System.out.println(">>> Can't expand Matrix! <<< ");
			return null;
		} else {
			// Get old matrix 2D array
			double[][] oldMatrixArrays = getArrays();
			// Initialize new reduced 2D array of desired size
			double[][] newMatrixArrays = new double[newRowSize][newColumnSize]; //initialize 2D array of desired size
			for(int i = 0; i < newRowSize; i++) {
				for(int k = 0; k < newColumnSize; k++) {
					newMatrixArrays[i][k] = oldMatrixArrays[i][k];
				}
			}
			// Return the reduced Dataset
			return new Dataset(new Matrix(newMatrixArrays));
		}
		
	}

	/** Subset 2
	 *  Method overloading
	 *  Returns reduced Matrix, if Matrix is given
	 */
	public static Matrix subset(Matrix matrix, int newRowSize, int newColumnSize) {
			
			// If user inputs a larger matrix than existing
			if(newRowSize > matrix.getRowDimension() || newColumnSize > matrix.getColumnDimension()) {
				System.out.println(">>> Can't expand Matrix! <<< ");
				return null;
			} else {
				// Get old matrix 2D array
				double[][] oldMatrixArrays = matrix.getArray();
				// Initialize new reduced 2D array of desired size
				double[][] newMatrixArrays = new double[newRowSize][newColumnSize]; 
				for(int i = 0; i < newRowSize; i++) {
					for(int k = 0; k < newColumnSize; k++) {
						newMatrixArrays[i][k] = oldMatrixArrays[i][k];
					}
				}
				// Return the reduced Matrix
				return new Matrix(newMatrixArrays);
			}
			
		}
		
	/**
	 *  Print Dataset in a nice format for fun!
	 */
	public void printMatrix() {
		
		// Print basic statistics
		System.out.printf("\n%d-by-%d Dataset\n", numRows, numColumns);
		System.out.printf("%d values \n\n", numRows * numColumns);
		
		// Print column numbers
		System.out.print("     ");
		for(int k = 0; k < numColumns; k++) {
			// Print column number
			System.out.printf("%7d ", k+1);
		}
		System.out.print("\n    ________________________________________________________________________\n");
		
		for(int i = 0; i < numRows; i++) {
			// Print row number
			System.out.printf("%-3d| ", i+1);
			for(int k = 0; k < numColumns; k++) {
				// Print matrix value
				System.out.printf("%7.3f ", arrays[i][k]);
			}
			System.out.println();
		}
	}
	
	  /**
	   *  Generates a CSV file from a Dataset object instance
	   *  Compared to the initial CSV input file, the output CSV is transposed
	   *  Output format: observations as rows, attributes as columns
	   */
	  public void printToCSV(String filename) {
		try {
		PrintWriter writer = new PrintWriter(filename);
		for(int i = 0; i < numRows; i++) {
			double[] currentRow = this.arrays[i];
			// *Optional* Print article names in the first column
			// writer.print("article"+ (i+1) + ",");
			// Print row values in comma separated format
			for(int k = 0; k < numColumns; k++) {
				writer.print(currentRow[k] + ",");
			}
			writer.println();
		}
		writer.close();
		} catch (FileNotFoundException e) { e.printStackTrace();}
	}

}
